---
kind: pipeline
name: WCv4-rng-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:WCv4-rng-stable
        --file dockerfiles/WCv4-rng-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:WCv4-rng-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:WCv4-rng-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: WCv4-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:WCv4-stable
        --file dockerfiles/WCv4-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:WCv4-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:WCv4-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: WCv4.0-RC1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:WCv4.0-RC1
        --file dockerfiles/WCv4.0-RC1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:WCv4.0-RC1
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:WCv4.0-RC1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: WCv4.0-RC2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:WCv4.0-RC2
        --file dockerfiles/WCv4.0-RC2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:WCv4.0-RC2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:WCv4.0-RC2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: WCv4.0-RC3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:WCv4.0-RC3
        --file dockerfiles/WCv4.0-RC3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:WCv4.0-RC3
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:WCv4.0-RC3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: WCv4.0-RC4

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:WCv4.0-RC4
        --file dockerfiles/WCv4.0-RC4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:WCv4.0-RC4
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:WCv4.0-RC4
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: WCv4.0-RC5

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:WCv4.0-RC5
        --file dockerfiles/WCv4.0-RC5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:WCv4.0-RC5
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:WCv4.0-RC5
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: WCv4.0-RC6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:WCv4.0-RC6
        --file dockerfiles/WCv4.0-RC6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:WCv4.0-RC6
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:WCv4.0-RC6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: WCv4.0-RC7

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:WCv4.0-RC7
        --file dockerfiles/WCv4.0-RC7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:WCv4.0-RC7
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:WCv4.0-RC7
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: WCv4.0-RC8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:WCv4.0-RC8
        --file dockerfiles/WCv4.0-RC8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:WCv4.0-RC8
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:WCv4.0-RC8
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: WCv4.0-RC9

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:WCv4.0-RC9
        --file dockerfiles/WCv4.0-RC9/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:WCv4.0-RC9
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:WCv4.0-RC9
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: l

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:l
        --file dockerfiles/l/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:l
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:l
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v0.5

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v0.5
        --file dockerfiles/v0.5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v0.5
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v0.5
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v1.8.8.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v1.8.8.0
        --file dockerfiles/v1.8.8.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v1.8.8.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v1.8.8.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v1.9.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v1.9.0
        --file dockerfiles/v1.9.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v1.9.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v1.9.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.0.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.0.2
        --file dockerfiles/v2.0.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.0.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.0.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.0.3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.0.3
        --file dockerfiles/v2.0.3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.0.3
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.0.3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.0.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.0.6
        --file dockerfiles/v2.0.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.0.6
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.0.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.0.8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.0.8
        --file dockerfiles/v2.0.8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.0.8
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.0.8
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.0rc1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.0rc1
        --file dockerfiles/v2.0rc1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.0rc1
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.0rc1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.0rc2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.0rc2
        --file dockerfiles/v2.0rc2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.0rc2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.0rc2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.0rc2b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.0rc2b
        --file dockerfiles/v2.0rc2b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.0rc2b
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.0rc2b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.0rc3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.0rc3
        --file dockerfiles/v2.0rc3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.0rc3
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.0rc3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.1.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.1.1
        --file dockerfiles/v2.1.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.1.1
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.1.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.1.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.1.2
        --file dockerfiles/v2.1.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.1.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.1.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.1.4

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.1.4
        --file dockerfiles/v2.1.4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.1.4
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.1.4
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.2.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.2.0
        --file dockerfiles/v2.2.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.2.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.2.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.2.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.2.1
        --file dockerfiles/v2.2.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.2.1
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.2.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.2.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.2.2
        --file dockerfiles/v2.2.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.2.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.2.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.3.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.3.0
        --file dockerfiles/v2.3.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.3.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.3.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.4.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.4.0
        --file dockerfiles/v2.4.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.4.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.4.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.4.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.4.2
        --file dockerfiles/v2.4.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.4.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.4.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.4.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.4.6
        --file dockerfiles/v2.4.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.4.6
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.4.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.4.7

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.4.7
        --file dockerfiles/v2.4.7/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.4.7
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.4.7
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.5.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.5.0
        --file dockerfiles/v2.5.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.5.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.5.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.5.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.5.2
        --file dockerfiles/v2.5.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.5.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.5.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.5.2b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.5.2b
        --file dockerfiles/v2.5.2b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.5.2b
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.5.2b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.6.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.6.0
        --file dockerfiles/v2.6.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.6.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.6.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.6.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.6.2
        --file dockerfiles/v2.6.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.6.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.6.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.7.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.7.0
        --file dockerfiles/v2.7.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.7.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.7.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.7.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.7.2
        --file dockerfiles/v2.7.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.7.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.7.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.8.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.8.0
        --file dockerfiles/v2.8.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.8.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.8.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.8.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.8.2
        --file dockerfiles/v2.8.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.8.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.8.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.8.3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.8.3
        --file dockerfiles/v2.8.3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.8.3
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.8.3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.8.4

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.8.4
        --file dockerfiles/v2.8.4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.8.4
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.8.4
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.8.5

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.8.5
        --file dockerfiles/v2.8.5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.8.5
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.8.5
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.8.5a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.8.5a
        --file dockerfiles/v2.8.5a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.8.5a
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.8.5a
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.8.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.8.6
        --file dockerfiles/v2.8.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.8.6
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.8.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.9.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.9.0
        --file dockerfiles/v2.9.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.9.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.9.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.9.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.9.1
        --file dockerfiles/v2.9.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.9.1
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.9.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.9.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.9.2
        --file dockerfiles/v2.9.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.9.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.9.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v2.9.4

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v2.9.4
        --file dockerfiles/v2.9.4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v2.9.4
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v2.9.4
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.0.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.0.0
        --file dockerfiles/v3.0.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.0.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.0.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.0.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.0.2
        --file dockerfiles/v3.0.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.0.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.0.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.1.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.1.0
        --file dockerfiles/v3.1.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.1.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.1.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.10.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.10.0-stable
        --file dockerfiles/v3.10.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.10.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.10.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.10.0a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.10.0a
        --file dockerfiles/v3.10.0a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.10.0a
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.10.0a
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.10.2-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.10.2-stable
        --file dockerfiles/v3.10.2-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.10.2-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.10.2-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.10.3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.10.3
        --file dockerfiles/v3.10.3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.10.3
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.10.3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.10.4

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.10.4
        --file dockerfiles/v3.10.4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.10.4
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.10.4
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.11.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.11.0-stable
        --file dockerfiles/v3.11.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.11.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.11.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.11.1-tls13-beta

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.11.1-tls13-beta
        --file dockerfiles/v3.11.1-tls13-beta/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.11.1-tls13-beta
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.11.1-tls13-beta
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.12.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.12.0-stable
        --file dockerfiles/v3.12.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.12.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.12.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.12.2-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.12.2-stable
        --file dockerfiles/v3.12.2-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.12.2-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.12.2-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.13.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.13.0-stable
        --file dockerfiles/v3.13.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.13.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.13.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.13.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.13.2
        --file dockerfiles/v3.13.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.13.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.13.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.13.3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.13.3
        --file dockerfiles/v3.13.3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.13.3
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.13.3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.14.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.14.0-stable
        --file dockerfiles/v3.14.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.14.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.14.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.14.0a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.14.0a
        --file dockerfiles/v3.14.0a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.14.0a
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.14.0a
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.14.0b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.14.0b
        --file dockerfiles/v3.14.0b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.14.0b
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.14.0b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.14.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.14.2
        --file dockerfiles/v3.14.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.14.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.14.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.14.4

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.14.4
        --file dockerfiles/v3.14.4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.14.4
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.14.4
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.14.5

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.14.5
        --file dockerfiles/v3.14.5/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.14.5
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.14.5
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.15.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.15.0-stable
        --file dockerfiles/v3.15.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.15.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.15.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.15.3-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.15.3-stable
        --file dockerfiles/v3.15.3-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.15.3-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.15.3-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.15.5-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.15.5-stable
        --file dockerfiles/v3.15.5-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.15.5-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.15.5-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.15.5a

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.15.5a
        --file dockerfiles/v3.15.5a/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.15.5a
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.15.5a
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.15.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.15.6
        --file dockerfiles/v3.15.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.15.6
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.15.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.15.7-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.15.7-stable
        --file dockerfiles/v3.15.7-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.15.7-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.15.7-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.15.8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.15.8
        --file dockerfiles/v3.15.8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.15.8
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.15.8
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.2.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.2.0
        --file dockerfiles/v3.2.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.2.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.2.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.2.4

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.2.4
        --file dockerfiles/v3.2.4/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.2.4
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.2.4
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.2.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.2.6
        --file dockerfiles/v3.2.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.2.6
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.2.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.3.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.3.0
        --file dockerfiles/v3.3.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.3.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.3.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.3.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.3.2
        --file dockerfiles/v3.3.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.3.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.3.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.3.3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.3.3
        --file dockerfiles/v3.3.3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.3.3
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.3.3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.4.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.4.0
        --file dockerfiles/v3.4.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.4.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.4.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.4.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.4.2
        --file dockerfiles/v3.4.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.4.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.4.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.4.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.4.6
        --file dockerfiles/v3.4.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.4.6
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.4.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.4.8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.4.8
        --file dockerfiles/v3.4.8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.4.8
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.4.8
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.6.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.6.0
        --file dockerfiles/v3.6.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.6.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.6.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.6.0b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.6.0b
        --file dockerfiles/v3.6.0b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.6.0b
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.6.0b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.6.2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.6.2
        --file dockerfiles/v3.6.2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.6.2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.6.2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.6.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.6.6
        --file dockerfiles/v3.6.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.6.6
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.6.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.6.8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.6.8
        --file dockerfiles/v3.6.8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.6.8
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.6.8
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.6.9

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.6.9
        --file dockerfiles/v3.6.9/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.6.9
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.6.9
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.6.9b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.6.9b
        --file dockerfiles/v3.6.9b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.6.9b
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.6.9b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.6.9c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.6.9c
        --file dockerfiles/v3.6.9c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.6.9c
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.6.9c
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.6.9d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.6.9d
        --file dockerfiles/v3.6.9d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.6.9d
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.6.9d
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.69.d

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.69.d
        --file dockerfiles/v3.69.d/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.69.d
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.69.d
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.7.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.7.0
        --file dockerfiles/v3.7.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.7.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.7.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.7.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.7.1
        --file dockerfiles/v3.7.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.7.1
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.7.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.7.3

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.7.3
        --file dockerfiles/v3.7.3/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.7.3
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.7.3
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.8.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.8.0
        --file dockerfiles/v3.8.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.8.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.8.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.9.0

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.9.0
        --file dockerfiles/v3.9.0/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.9.0
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.9.0
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.9.1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.9.1
        --file dockerfiles/v3.9.1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.9.1
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.9.1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.9.10-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.9.10-stable
        --file dockerfiles/v3.9.10-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.9.10-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.9.10-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.9.10b

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.9.10b
        --file dockerfiles/v3.9.10b/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.9.10b
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.9.10b
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.9.6

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.9.6
        --file dockerfiles/v3.9.6/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.9.6
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.9.6
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.9.6w

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.9.6w
        --file dockerfiles/v3.9.6w/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.9.6w
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.9.6w
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v3.9.8

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v3.9.8
        --file dockerfiles/v3.9.8/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v3.9.8
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v3.9.8
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v4.0.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v4.0.0-stable
        --file dockerfiles/v4.0.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v4.0.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v4.0.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v4.1.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v4.1.0-stable
        --file dockerfiles/v4.1.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v4.1.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v4.1.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v4.2.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v4.2.0-stable
        --file dockerfiles/v4.2.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v4.2.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v4.2.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v4.2.0c

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v4.2.0c
        --file dockerfiles/v4.2.0c/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v4.2.0c
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v4.2.0c
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v4.3.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v4.3.0-stable
        --file dockerfiles/v4.3.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v4.3.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v4.3.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v4.4.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v4.4.0-stable
        --file dockerfiles/v4.4.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v4.4.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v4.4.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v4.5.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v4.5.0-stable
        --file dockerfiles/v4.5.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v4.5.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v4.5.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v4.6.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v4.6.0-stable
        --file dockerfiles/v4.6.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v4.6.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v4.6.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v4.7.0-stable

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v4.7.0-stable
        --file dockerfiles/v4.7.0-stable/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v4.7.0-stable
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v4.7.0-stable
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: v4.7.1r

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:v4.7.1r
        --file dockerfiles/v4.7.1r/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:v4.7.1r
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:v4.7.1r
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: wolfRand-RC1

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:wolfRand-RC1
        --file dockerfiles/wolfRand-RC1/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:wolfRand-RC1
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:wolfRand-RC1
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
name: wolfRand-RC2

steps:
    # Build the implementation and set the appropriate tag
  - name: build
    image: docker
    commands:
      - docker build .
        --tag r4t31/wolfssl:wolfRand-RC2
        --file dockerfiles/wolfRand-RC2/Dockerfile

    # Store the resulting image on the host docker, so it can be used in the
    # next step.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    # Start the implementation, the system under test, in the background
  - name: sut
    image: r4t31/wolfssl:wolfRand-RC2
    detach: true

  - name: verify TLS10
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS10
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS11
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS11
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: verify TLS12
    image: r4t31/tlsattackerconnector
    commands:
      - sleep 5
      - connector
        --targetHost sut
        --protocolVersion TLS12
        --cipherSuite "TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA"
        --merge-application
        --test | tee result.log
      - "grep -e 'ApplicationData: APPLICATION|ConnectionClosed' -e 'ApplicationData: APPLICATION|ALERT_WARNING_CLOSE_NOTIFY|ConnectionClosed' result.log"

  - name: publish
    image: docker
    commands:
      - docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - docker push r4t31/wolfssl:wolfRand-RC2
    environment:
      DOCKER_USERNAME:
        from_secret: docker_username
      DOCKER_PASSWORD:
        from_secret: docker_password

    # Give access to host docker, the previously build image is available here.
    volumes:
      - name: docker
        path: /var/run/docker.sock

    when:
      branch:
        - master


volumes:
    # Expose host docker to build steps
  - name: docker
    host:
      path: /var/run/docker.sock

